{"version":3,"sources":["components/Cards/Card.js","components/Form/Form.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","uk-grid","emp","first_name","last_name","country","department","email","Form","htmlFor","type","name","value","input","onChange","handleInputChange","handleSelectChange","onClick","handleFormSubmit","Navbar","uk-navbar","App","state","searchInp","category","categorySel","event","setState","target","preventDefault","toLowerCase","cat","this","db","map","i","key","renderEmployees","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yxNAmBeA,MAhBf,SAAeC,GAEf,OACE,yBAAMC,UAAU,YAAYC,UAAQ,QAClC,6BACE,yBAAKD,UAAU,sDACb,wBAAIA,UAAU,kCAAkCD,EAAMG,IAAIC,WAAa,IAAMJ,EAAMG,IAAIE,WACvF,uBAAGJ,UAAU,oBAAb,YAA0CD,EAAMG,IAAIG,SACpD,uBAAGL,UAAU,qCAAb,eAA8DD,EAAMG,IAAII,YACxE,uBAAGN,UAAU,qCAAqCD,EAAMG,IAAIK,W,MCcrDC,MAvBf,SAAeT,GAEb,OACE,8BAEI,2BAAOU,QAAQ,SAAf,mBACA,2BACEC,KAAK,OACLV,UAAU,WACVW,KAAK,QACLC,MAAOb,EAAMc,MACbC,SAAUf,EAAMgB,oBAEpB,4BAAQf,UAAU,gCAClBc,SAAUf,EAAMiB,oBACd,2CACA,+CAEF,4BAAQhB,UAAU,kDAAkDiB,QAASlB,EAAMmB,kBAAnF,Y,OCPSC,MAZf,WACE,OAEE,yBAAKnB,UAAU,gCAAgCoB,YAAU,QACvD,yBAAKpB,UAAU,oBACb,uBAAGA,UAAU,0BAAb,yBC4DOqB,E,2MA3DbC,MAAO,CACLC,UAAW,GACXV,MAAO,GACPW,SAAU,UACVC,YAAa,I,EAGfV,kBAAoB,SAAAW,GAClB,EAAKC,SAAL,eAAiBD,EAAME,OAAOjB,KAAOe,EAAME,OAAOhB,S,EAGpDM,iBAAmB,SAAAQ,GACjBA,EAAMG,iBACN,EAAKF,SAAS,CAACJ,UAAW,EAAKD,MAAMT,MAAOA,MAAO,GAAIW,SAAU,GAAIC,YAAa,EAAKH,MAAME,Y,EAE/FR,mBAAqB,SAAAU,GACnB,EAAKC,SAAS,CAACH,SAAWE,EAAME,OAAOhB,MAAOkB,iB,+EAE/BC,GAAM,IAAD,OACpB,MAA4B,KAAzBC,KAAKV,MAAMC,UACPU,EAAGC,KAAI,SAAChC,EAAKiC,GACnB,GAAW,eAARJ,GACD,GAAG7B,EAAII,aAAe,EAAKgB,MAAMC,UAC/B,OAAO,kBAAC,EAAD,CAAMrB,IAAKA,EAAKkC,IAAKD,SAI7B,GAAIjC,EAAIG,UAAY,EAAKiB,MAAMC,UAC7B,OAAO,kBAAC,EAAD,CAAMrB,IAAKA,EAAKkC,IAAKD,OAM1BF,EAAGC,KAAI,SAAChC,EAAKiC,GAAN,OAAY,kBAAC,EAAD,CAAMjC,IAAKA,EAAKkC,IAAKD,S,+BAMhD,OACE,oCACA,kBAAC,EAAD,MACA,yBAAKnC,UAAU,gBACb,kBAAC,EAAD,CACAa,MAAOmB,KAAKV,MAAMT,MAClBE,kBAAmBiB,KAAKjB,kBACxBG,iBAAkBc,KAAKd,iBACvBF,mBAAoBgB,KAAKhB,qBAEzB,yBAAKhB,UAAU,yCACdgC,KAAKK,gBAAgBL,KAAKV,MAAMG,oB,GArDvBa,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.645685fd.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nfunction Card (props) {\n  \nreturn(\n  <div  className=\"container\" uk-grid=\"true\">\n    <div>\n      <div className=\"uk-card uk-card-default uk-card-hover uk-card-body\">\n        <h3 className=\"uk-card-title uk-text-truncate\">{props.emp.first_name + ' ' + props.emp.last_name}</h3>\n        <p className=\"uk-margin-remove\">Country: {props.emp.country}</p>\n        <p className=\"uk-margin-remove uk-text-truncate\">Department: {props.emp.department}</p>\n        <p className=\"uk-margin-remove uk-text-truncate\">{props.emp.email}</p>\n      </div>\n    </div>\n  </div>\n);\n}\n\nexport default Card","import React from 'react';\nimport './Form.css';\n\nfunction Form (props) {\n  \n  return(\n    <form>\n     \n        <label htmlFor=\"input\">Employee Search</label>\n        <input\n          type=\"text\"\n          className=\"uk-input\"\n          name='input'\n          value={props.input}\n          onChange={props.handleInputChange} \n          />\n      <select className=\"uk-select uk-margin-small-top\"\n      onChange={props.handleSelectChange}>\n        <option>Country</option>\n        <option>Department</option>\n      </select>\n      <button className=\"uk-button uk-button-primary uk-margin-small-top\" onClick={props.handleFormSubmit}>Search</button>\n    </form>\n  );\n}\n\nexport default Form;","import React from 'react'\n\nfunction Navbar () {\n  return(\n    \n    <nav className=\"uk-navbar-container uk-margin\" uk-navbar=\"true\">\n      <div className=\"uk-navbar-center\">\n        <a className=\"uk-navbar-item uk-logo\">Employee Directory</a> \n      </div>  \n    </nav>\n \n  )\n}\n\nexport default Navbar","import React, {Component} from 'react';\nimport Card from './components/Cards';\nimport Form from './components/Form'\nimport db from './db/db.json';\nimport Navbar from './components/Navbar'\n\nclass App extends Component {\n\n  state ={\n    searchInp: '',\n    input: '',\n    category: 'country',\n    categorySel: ''\n  }\n\n  handleInputChange = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault()\n    this.setState({searchInp: this.state.input, input: '', category: '', categorySel: this.state.category})\n  }\n  handleSelectChange = event => {\n    this.setState({category: (event.target.value).toLowerCase()})\n  }\n  renderEmployees (cat) {\n    if(this.state.searchInp !== ''){ \n    return db.map((emp, i) => {\n     if(cat === 'department'){\n       if(emp.department === this.state.searchInp){\n         return <Card emp={emp} key={i} />\n       } \n      }\n      else{\n        if (emp.country === this.state.searchInp) {\n          return <Card emp={emp} key={i} />\n        }\n      }\n     })\n    }\n    else {\n     return db.map((emp, i) => <Card emp={emp} key={i} />)\n    }\n  }\n \n  render(){ \n    \n    return(\n      <>\n      <Navbar />\n      <div className=\"uk-container\">\n        <Form \n        input={this.state.input}\n        handleInputChange={this.handleInputChange}\n        handleFormSubmit={this.handleFormSubmit}\n        handleSelectChange={this.handleSelectChange}\n        />\n        <div className=\"uk-row uk-margin-top uk-margin-bottom\">\n        {this.renderEmployees(this.state.categorySel)}\n        </div>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}